# Dental Voice AI - Docker Compose Configuration
# Development and production environments

version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      target: development
    container_name: dental-voice-ai-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - VAPI_API_KEY=${VAPI_API_KEY}
      - GOOGLE_CALENDAR_ID=${GOOGLE_CALENDAR_ID}
    volumes:
      - ./src:/app/src
      - ./prompts:/app/prompts
      - ./scripts:/app/scripts
      - ./tests:/app/tests
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - dental-voice-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: dental-voice-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dental-voice-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for local development (optional)
  postgres:
    image: postgres:15-alpine
    container_name: dental-voice-ai-postgres
    environment:
      - POSTGRES_DB=dental_voice_ai
      - POSTGRES_USER=dental_user
      - POSTGRES_PASSWORD=dental_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dental-voice-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dental_user -d dental_voice_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: dental-voice-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - dental-voice-ai-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: dental-voice-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - dental-voice-ai-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: dental-voice-ai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dental-voice-ai-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Testing service
  test:
    build:
      context: .
      target: development
    container_name: dental-voice-ai-test
    environment:
      - ENVIRONMENT=test
      - LOG_LEVEL=debug
      - SUPABASE_URL=${SUPABASE_URL_TEST}
      - SUPABASE_KEY=${SUPABASE_KEY_TEST}
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./prompts:/app/prompts
    depends_on:
      - redis
    networks:
      - dental-voice-ai-network
    command: ["pytest", "tests/", "-v", "--cov=dental_voice_ai"]
    profiles:
      - test

  # Database migration service
  migrate:
    build:
      context: .
      target: development
    container_name: dental-voice-ai-migrate
    environment:
      - ENVIRONMENT=development
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - ./src:/app/src
      - ./scripts:/app/scripts
    networks:
      - dental-voice-ai-network
    command: ["python", "scripts/migrate_db.py"]
    profiles:
      - migrate

  # Backup service
  backup:
    build:
      context: .
      target: development
    container_name: dental-voice-ai-backup
    environment:
      - ENVIRONMENT=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    volumes:
      - ./backups:/app/backups
      - ./scripts:/app/scripts
    networks:
      - dental-voice-ai-network
    command: ["python", "scripts/backup.py"]
    profiles:
      - backup

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  dental-voice-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
